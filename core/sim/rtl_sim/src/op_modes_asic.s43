/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                            CPU OPERATING MODES                            */
/*---------------------------------------------------------------------------*/
/* Test the CPU Operating modes:                                             */
/*                                 - CPUOFF (<=> R2[4]): turn off CPU.       */
/*                                 - OSCOFF (<=> R2[5]): turn off LFXT_CLK.  */
/*                                 - SCG0   (<=> R2[6]): turn off DCO.       */
/*                                 - SCG1   (<=> R2[7]): turn off SMCLK.     */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev: 19 $                                                                */
/* $LastChangedBy: olivier.girard $                                          */
/* $LastChangedDate: 2009-08-04 23:47:15 +0200 (Tue, 04 Aug 2009) $          */
/*===========================================================================*/

.include "pmem_defs.asm"

.global main

WAIT_FUNC:
	dec r14
	jnz WAIT_FUNC
	ret
	
main:

	; Initialize stack and enable global interrupts
	mov   #DMEM_250, r1
	eint

	mov     #0x1000, r15

	
        /* -------------- SCG1   (<=> R2[7]): turn off SMCLK --------------- */

 	mov.b  #0x00, &BCSCTL2  ; # Div /1

	mov    #0x0008, r2      ; # SCG1=0 (SMCLK on)
	mov    #0x1001, r15
 	mov    #0x0030, r14
        call   #WAIT_FUNC

	mov    #0x0088, r2      ; # SCG1=1 (SMCLK off)
	mov    #0x1002, r15
 	mov    #0x0030, r14
        call   #WAIT_FUNC

	mov    #0x1003, r15     ; # SCG1=1 (SMCLK off) with IRQ PORT2 (extiting power mode)
 	mov    #0x0030, r14
        call   #WAIT_FUNC

	mov    #0x1004, r15     ; # SCG1=1 (SMCLK off) return from IRQ PORT2
 	mov    #0x0030, r14
        call   #WAIT_FUNC

	mov    #0x0088, r2      ; # SCG1=1 (SMCLK off)
	mov    #0x1005, r15
 	mov    #0x0030, r14
        call   #WAIT_FUNC

	mov    #0x1006, r15     ; # SCG1=1 (SMCLK off) with IRQ PORT1 (staying in power mode)
 	mov    #0x0030, r14
        call   #WAIT_FUNC

	mov    #0x1007, r15     ; # SCG1=1 (SMCLK off) return from IRQ PORT1
 	mov    #0x0030, r14
        call   #WAIT_FUNC

	mov    #0x0008, r2      ; # SCG1=0 (SMCLK on)
	mov    #0x1008, r15
 	mov    #0x0030, r14
        call   #WAIT_FUNC
	
	mov     #0x2000, r15

	
        /* -------------- OSCOFF (<=> R2[5]): turn off LFXT1CLK --------------- */

 	mov.b  #0x00, &BCSCTL1  ; # ACLK Div /1

	mov    #0x0008, r2      ; # OSCOFF=0 (ACLK on)
	mov    #0x2001, r15
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x0028, r2      ; # OSCOFF=1 (ACLK off)
	mov    #0x2002, r15
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x2003, r15     ; # OSCOFF=1 (ACLK off) with IRQ PORT2 (extiting power mode)
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x2004, r15     ; # OSCOFF=1 (ACLK off) return from IRQ PORT2
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x0028, r2      ; # OSCOFF=1 (ACLK off)
	mov    #0x2005, r15
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x2006, r15     ; # OSCOFF=1 (ACLK off) with IRQ PORT1 (staying in power mode)
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x2007, r15     ; # OSCOFF=1 (ACLK off) return from IRQ PORT1
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x0008, r2      ; # OSCOFF=0 (ACLK on)
	mov    #0x2008, r15
 	mov    #0x0060, r14
        call   #WAIT_FUNC
	

	mov    #0x3000, r15

	
        /* -------------- CPUOFF (<=> R2[4]): turn off CPU    --------------- */

 	mov.b  #0x00, &BCSCTL2  ; # Div /1 --> select DCOCLK

	mov    #0x3001, r15
	mov    #0x0008, r2      ; # CPUOFF=0 (CPU on)
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x3002, r15
	mov    #0x0018, r2      ; # CPUOFF=1 (CPU off)
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x3003, r15
	mov    #0x0008, r2      ; # CPUOFF=0 (CPU on)
 	mov    #0x0060, r14
        call   #WAIT_FUNC


	mov    #0x4000, r15


        /* -------------- SCG0 (<=> R2[6]): turn off DCO oscillator  --------------- */

 	mov.b  #0x00, &BCSCTL2  ; # Div /1 --> select DCOCLK

	mov    #0x4001, r15
	mov    #0x0008, r2      ; # SCG0=0 (DCO on)
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x4002, r15
	mov    #0x0048, r2      ; # SCG0=1 (DCO off)
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	mov    #0x4003, r15
	mov    #0x0008, r2      ; # SCG0=0 (DCO on)
 	mov    #0x0060, r14
        call   #WAIT_FUNC

	
	mov    #0x5000, r15
				

        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	nop
	br #0xffff

	  
        /* ----------------------      INTERRUPT ROUTINES    --------------- */

PORT1_VECTOR:
	push       r13
	push       r14
 	mov    #0x0060, r14
        call   #WAIT_FUNC
	mov    #0xaaaa, r13
	pop        r14
	pop        r13
 	reti	

PORT2_VECTOR:
	push       r13
 	push       r14
 	mov    #0x0060, r14
        call   #WAIT_FUNC
	mov    #0xbbbb, r13
	pop        r14
	pop        r13
        bic    #0xf0, 0(r1) ;exit all lowpower mode
	reti	


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word PORT1_VECTOR ; Interrupt  2                      <unused>
.word PORT2_VECTOR ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
