/*===========================================================================*/
/* Copyright (C) 2001 Authors                                                */
/*                                                                           */
/* This source file may be used and distributed without restriction provided */
/* that this copyright statement is not removed from the file and that any   */
/* derivative work contains the original copyright notice and the associated */
/* disclaimer.                                                               */
/*                                                                           */
/* This source file is free software; you can redistribute it and/or modify  */
/* it under the terms of the GNU Lesser General Public License as published  */
/* by the Free Software Foundation; either version 2.1 of the License, or    */
/* (at your option) any later version.                                       */
/*                                                                           */
/* This source is distributed in the hope that it will be useful, but WITHOUT*/
/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     */
/* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public       */
/* License for more details.                                                 */
/*                                                                           */
/* You should have received a copy of the GNU Lesser General Public License  */
/* along with this source; if not, write to the Free Software Foundation,    */
/* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA        */
/*                                                                           */
/*===========================================================================*/
/*                   TWO-OPERAND ARITHMETIC: MOV INSTRUCTION                 */
/*---------------------------------------------------------------------------*/
/* Test the MOV instruction with all addressing modes                        */
/*                                                                           */
/* Author(s):                                                                */
/*             - Olivier Girard,    olgirard@gmail.com                       */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* $Rev$                                                                */
/* $LastChangedBy$                                          */
/* $LastChangedDate$          */
/*===========================================================================*/

.include "pmem_defs.asm"
	
.global main

main:
        /* ---------------------- INITIALIZE REGISTERS --------------------- */
	mov     #0x2202, r2
	mov     #0x3333, r3
	mov     #0x4444, r4
	mov     #0x5555, r5
	mov     #0x6666, r6
	mov     #0x7777, r7
	mov     #0x8888, r8
	mov     #0x9999, r9
	mov     #0xaaaa, r10
	mov     #0xbbbb, r11
	mov     #0xcccc, r12
	mov     #0xdddd, r13
	mov     #0xeeee, r14

	mov     #0x1000, r15


        /* ---------------------- TEST WHEN SOURCE IS Rn ------------------- */
.set   Rn_EDE,  DMEM_200
.set   Rn_TONY, DMEM_204

	mov          r4, r3        ;# Overwrite r3 with 0x4444
        mov #test_Rn_PC, r4
        br           r4
	nop
	nop
	nop
	nop
        mov     #0x0000, r4        ;# Make sure the jump is taken
test_Rn_PC:
	mov   #DMEM_200, r5
	mov     #0x1234, r6
	mov          r6, 16(r5)    ;# Write 0x1234 to memory @0x0210
	mov     #0x5678, r7
	mov          r7, Rn_EDE+PMEM_LENGTH  ;# Write 0x5678 to memory @0x0200
	mov     #0x9abc, r8
	mov          r8, &Rn_TONY  ;# Write 0x9abc to memory @0x0204

	mov     #0x2000, r15


        /* ---------------------- TEST WHEN SOURCE IS @Rn ------------------ */
.set   aRn_EDE,  DMEM_200
.set   aRn_TONY, DMEM_204

	mov     #DMEM_210, r4
	mov      #0x3333, r3
	mov          @r4, r3        ;# r3 takes @0x0210 value: 0x1234
        mov #test_aRn_PC, r4
        mov           r4, &DMEM_200
        mov    #DMEM_200, r4
        br           @r4
	nop
	nop
	nop
        mov      #0x0000, r4        ;# Make sure the jump is taken
test_aRn_PC:
        mov    #DMEM_200, r5
        mov    #DMEM_204, r6
	mov          @r6, 16(r5)    ;# Move memory @0x204 (0x9abc) to memory @0x210
	mov      #0xfedc, &DMEM_202
	mov    #DMEM_202, r6
	mov          @r6, aRn_EDE+PMEM_LENGTH   ;# Move memory @0x202 (0xfedc) to memory @0x200
	mov      #0xf1d2, &DMEM_202
	mov    #DMEM_202, r6
	mov          @r6, &aRn_TONY ;# Move memory @0x202 (0xf1d2) to memory @0x204

	mov      #0x3000, r15


        /* ---------------------- TEST WHEN SOURCE IS @Rn+ ----------------- */
.set   aRni_EDE,  DMEM_200
.set   aRni_TONY, DMEM_214

	mov      #0x1111, &DMEM_200
	mov    #DMEM_200, r4
	mov         @r4+, r5         ;# Write @0x200 (0x1111) to R5

        mov #test_aRni_PC, &DMEM_204
	mov     #DMEM_204, r6
        br           @r6+
	nop
	nop
        nop
	nop
        mov      #0x0000, r6         ;# Make sure the jump is taken
test_aRni_PC:
        mov      #0x1234, &DMEM_210
        mov      #0x5678, &DMEM_212
        mov      #0x9abc, &DMEM_214
        mov      #0xdef0, &DMEM_216

        mov    #DMEM_210, r8
        mov    #DMEM_216, r7
	mov         @r7+, 16(r8)     ;# Move memory @0x216 (0xdef0) to memory @0x220

	mov    #DMEM_212, r8
	mov         @r8+, aRni_EDE+PMEM_LENGTH   ;# Move memory @0x212 (0x5678) to memory @0x200

	mov    #DMEM_210, r9
	mov         @r9+, &aRni_TONY ;# Move memory @0x210 (0x1234) to memory @0x214

	mov      #0x4000, r15



        /* ---------------------- TEST WHEN SOURCE IS #N ------------------- */
.set   N_EDE,  DMEM_210
.set   N_TONY, DMEM_206

	mov      #0x3210, r4         ;# Write 0x3210 to R4
	mov      #0xfcde, r5
        br       #test_N_PC
	nop
	nop
	nop
	nop
	mov      #0x0000, r5         ;# Make sure the jump is taken
test_N_PC:
        mov    #DMEM_200, r6
	mov      #0x5a5a, 48(r6)     ;# Move memory 0x5a5a to memory @0x230
	mov      #0x1a2b, N_EDE+PMEM_LENGTH      ;# Move memory 0x1a2b to memory @0x210
	mov      #0x3c4d, &N_TONY    ;# Move memory 0x3c4d to memory @0x206

	mov      #0x5000, r15



        /* ---------------------- TEST WHEN SOURCE IS x(Rn) ---------------- */
.set   xRn_EDE,  DMEM_220
.set   xRn_TONY, DMEM_208

	mov      #0x8347, &DMEM_210
	mov      #0x1234, &DMEM_200
	mov    #DMEM_200, r4
	mov       16(r4), r5         ;# Write 0x8347 to R5

	mov #test_xRn_PC, &DMEM_208
	mov      #0x1234, &DMEM_200
	mov      #0x2345, r6
	mov    #DMEM_200, r4
        br       8(r4)
	nop
	nop
	nop
	nop
	mov      #0x0000, r6         ;# Make sure the jump is taken
test_xRn_PC:
	mov      #0x4231, &DMEM_210
	mov      #0x1234, &DMEM_200
        mov    #DMEM_200, r7
        mov    #DMEM_202, r8
	mov       16(r7), 18(r8)      ;# Move memory @0x210 (0x4231) to memory @0x214
	mov      #0x7238, &DMEM_204
	mov      #0x1234, &DMEM_200
        mov    #DMEM_200, r7
	mov        4(r7), xRn_EDE+PMEM_LENGTH      ;# Move memory @0x204 (0x7238) to memory @0x220
	mov      #0x98b2, &DMEM_216
	mov      #0x1234, &DMEM_200
        mov    #DMEM_200, r7
	mov       22(r4), &xRn_TONY   ;# Move memory @0x216 (0x98b2) to memory @0x208

	mov      #0x6000, r15



        /* ---------------------- TEST WHEN SOURCE IS 'EDE' ---------------- */
.set   EDE_EDE,  DMEM_216
.set   EDE_TONY, DMEM_212

.set   EDE_200,  DMEM_200
.set   EDE_202,  DMEM_202
.set   EDE_204,  DMEM_204
.set   EDE_206,  DMEM_206
.set   EDE_208,  DMEM_208

	mov      #0xc3d6, &DMEM_200
	mov      #0x1234, &DMEM_202
	mov      #0x4321, r4
	mov      EDE_200+PMEM_LENGTH, r4          ;# Write 0xc3d6 to R4

	mov #test_EDE_PC, &DMEM_202
	mov      #0x1234, &DMEM_204
	mov      #0x3456, r6
        br       EDE_202+PMEM_LENGTH
	nop
	nop
	nop
	nop
	mov      #0x0000, r6          ;# Make sure the jump is taken
test_EDE_PC:

        mov    #DMEM_202, r8
	mov      #0xf712, &DMEM_204
	mov      #0x1234, &DMEM_206
	mov      EDE_204+PMEM_LENGTH, 18(r8)      ;# Move memory @0x204 (0xf712) to memory @0x214

	mov      #0xb3a9, &DMEM_206
	mov      #0x1234, &DMEM_208
	mov      EDE_206+PMEM_LENGTH, EDE_EDE+PMEM_LENGTH     ;# Move memory @0x206 (0xb3a9) to memory @0x216

	mov      #0x837A, &DMEM_208
	mov      #0x1234, &DMEM_20A
	mov      EDE_208+PMEM_LENGTH, &EDE_TONY   ;# Move memory @0x208 (0x837A) to memory @0x212

	mov      #0x7000, r15



        /* ---------------------- TEST WHEN SOURCE IS '&EDE' --------------- */
.set   aEDE_EDE,  DMEM_218
.set   aEDE_TONY, DMEM_202

	mov      #0x23d4, &DMEM_200
	mov      #0x1234, &DMEM_202
	mov      #0x4321, r4
	mov    &DMEM_200, r4          ;# Write 0x23d4 to R4

	mov #test_aEDE_PC, &DMEM_202
	mov      #0x1234,  &DMEM_204
	mov      #0xfb58,  r6
        br     &DMEM_202
	nop
	nop
	nop
	nop
	mov      #0x0000, r6          ;# Make sure the jump is taken
test_aEDE_PC:

        mov    #DMEM_202, r7
	mov      #0x481c, &DMEM_204
	mov      #0x1234, &DMEM_206
	mov    &DMEM_204, 18(r7)      ;# Move memory @0x204 (0x481c) to memory @0x214

	mov      #0x5c1f, &DMEM_206
	mov      #0x1234, &DMEM_208
	mov    &DMEM_206, aEDE_EDE+PMEM_LENGTH    ;# Move memory @0x206 (0x5c1f) to memory @0x218

	mov      #0xc16e, &DMEM_208
	mov      #0x1234, &DMEM_20A
	mov    &DMEM_208, &aEDE_TONY  ;# Move memory @0x208 (0xc16e) to memory @0x202

	mov      #0x8000, r15



        /* ---------------------- TEST WHEN SOURCE IS CONSTANT ------------- */
.set   CONST_EDE0,   DMEM_220
.set   CONST_EDE1,   DMEM_222
.set   CONST_EDE2,   DMEM_224
.set   CONST_EDE4,   DMEM_226
.set   CONST_EDE8,   DMEM_228
.set   CONST_EDEm1,  DMEM_22A

.set   CONST_TONY0,  DMEM_230
.set   CONST_TONY1,  DMEM_232
.set   CONST_TONY2,  DMEM_234
.set   CONST_TONY4,  DMEM_236
.set   CONST_TONY8,  DMEM_238
.set   CONST_TONYm1, DMEM_23A


	mov      #0x4444, r4              ;# Initialize registers
	mov      #0x5555, r5
	mov      #0x6666, r6
	mov      #0x7777, r7
	mov      #0x8888, r8
	mov      #0x9999, r9

	mov      #0x0000, r4              ;# Write +0 to R4
	mov      #0x0001, r5              ;# Write +1 to R5
	mov      #0x0002, r6              ;# Write +2 to R6
	mov      #0x0004, r7              ;# Write +4 to R7
	mov      #0x0008, r8              ;# Write +8 to R8
	mov      #0xffff, r9              ;# Write -1 to R9

        mov    #DMEM_202, r10
	mov      #0x1234, r11
	mov      #0x0000, 14(r10)         ;# Move +0 to memory @0x210
	mov      #0x0001, 16(r10)         ;# Move +1 to memory @0x212
	mov      #0x0002, 18(r10)         ;# Move +2 to memory @0x214
	mov      #0x0004, 20(r10)         ;# Move +4 to memory @0x216
	mov      #0x0008, 22(r10)         ;# Move +8 to memory @0x218
	mov      #0xffff, 24(r10)         ;# Move -1 to memory @0x21A

	mov      #0x0000, CONST_EDE0+PMEM_LENGTH      ;# Move +0 to memory @0x220
	mov      #0x0001, CONST_EDE1+PMEM_LENGTH      ;# Move +1 to memory @0x222
	mov      #0x0002, CONST_EDE2+PMEM_LENGTH      ;# Move +2 to memory @0x224
	mov      #0x0004, CONST_EDE4+PMEM_LENGTH      ;# Move +4 to memory @0x226
	mov      #0x0008, CONST_EDE8+PMEM_LENGTH      ;# Move +8 to memory @0x228
	mov      #0xffff, CONST_EDEm1+PMEM_LENGTH     ;# Move -1 to memory @0x22A

	mov      #0x0000, &CONST_TONY0    ;# Move +0 to memory @0x230
	mov      #0x0001, &CONST_TONY1    ;# Move +1 to memory @0x232
	mov      #0x0002, &CONST_TONY2    ;# Move +2 to memory @0x234
	mov      #0x0004, &CONST_TONY4    ;# Move +4 to memory @0x236
	mov      #0x0008, &CONST_TONY8    ;# Move +8 to memory @0x238
	mov      #0xffff, &CONST_TONYm1   ;# Move -1 to memory @0x23A

	mov      #0x9000, r15


        /* ---------------- TEST WHEN SOURCE IS CONSTANT IN BYTE MODE ------ */
	#
	# NOTE: The following section would not fit in the smallest ROM
        #       configuration for the "two-op_mov-b.s43" pattern.
        #       It is therefore executed here.
	#
.set   CONSTL_TONY0,  DMEM_250
.set   CONSTL_TONY1,  DMEM_252
.set   CONSTL_TONY2,  DMEM_254
.set   CONSTL_TONY4,  DMEM_256
.set   CONSTL_TONY8,  DMEM_258
.set   CONSTL_TONYm1, DMEM_25A
.set   CONSTH_TONY0,  DMEM_25D
.set   CONSTH_TONY1,  DMEM_25F
.set   CONSTH_TONY2,  DMEM_261
.set   CONSTH_TONY4,  DMEM_263
.set   CONSTH_TONY8,  DMEM_265
.set   CONSTH_TONYm1, DMEM_267

	mov      #0x4444, &DMEM_250        ;# Initialize Memory
	mov      #0x5555, &DMEM_252
	mov      #0x6666, &DMEM_254
	mov      #0x7777, &DMEM_256
	mov      #0x3535, &DMEM_258
	mov      #0x9999, &DMEM_25A
	mov      #0xaaaa, &DMEM_25C
	mov      #0xbbbb, &DMEM_25E
	mov      #0xcccc, &DMEM_260
	mov      #0xdddd, &DMEM_262
	mov      #0xeeee, &DMEM_264
	mov      #0x3333, &DMEM_266

	mov.b    #0x0000, &CONSTL_TONY0    ;# Move +0 to memory @0x250
	mov.b    #0x0001, &CONSTL_TONY1    ;# Move +1 to memory @0x252
	mov.b    #0x0002, &CONSTL_TONY2    ;# Move +2 to memory @0x254
	mov.b    #0x0004, &CONSTL_TONY4    ;# Move +4 to memory @0x256
	mov.b    #0x0008, &CONSTL_TONY8    ;# Move +8 to memory @0x258
	mov.b    #0xffff, &CONSTL_TONYm1   ;# Move -1 to memory @0x25A
	mov.b    #0x0000, &CONSTH_TONY0    ;# Move +0 to memory @0x25D
	mov.b    #0x0001, &CONSTH_TONY1    ;# Move +1 to memory @0x25F
	mov.b    #0x0002, &CONSTH_TONY2    ;# Move +2 to memory @0x261
	mov.b    #0x0004, &CONSTH_TONY4    ;# Move +4 to memory @0x263
	mov.b    #0x0008, &CONSTH_TONY8    ;# Move +8 to memory @0x265
	mov.b    #0xffff, &CONSTH_TONYm1   ;# Move -1 to memory @0x267


	mov      #0xA000, r15

        /* ----------------------         END OF TEST        --------------- */
end_of_test:
	nop
	br #0xffff


        /* ----------------------         INTERRUPT VECTORS  --------------- */

.section .vectors, "a"
.word end_of_test  ; Interrupt  0 (lowest priority)    <unused>
.word end_of_test  ; Interrupt  1                      <unused>
.word end_of_test  ; Interrupt  2                      <unused>
.word end_of_test  ; Interrupt  3                      <unused>
.word end_of_test  ; Interrupt  4                      <unused>
.word end_of_test  ; Interrupt  5                      <unused>
.word end_of_test  ; Interrupt  6                      <unused>
.word end_of_test  ; Interrupt  7                      <unused>
.word end_of_test  ; Interrupt  8                      <unused>
.word end_of_test  ; Interrupt  9                      <unused>
.word end_of_test  ; Interrupt 10                      Watchdog timer
.word end_of_test  ; Interrupt 11                      <unused>
.word end_of_test  ; Interrupt 12                      <unused>
.word end_of_test  ; Interrupt 13                      <unused>
.word end_of_test  ; Interrupt 14                      NMI
.word main         ; Interrupt 15 (highest priority)   RESET
